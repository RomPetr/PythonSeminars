from math import pi  # Загрузим число Пи с библиотеки Math

"""
Задача №47. Решение в группах
У вас есть код, который вы не можете менять (так часто бывает, когда код в глубине
программы используется множество раз и вы не хотите ничего сломать):
transformation = <???>
values = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] # или любой другой список
transormed_values = list(map(transformation, values))
Единственный способ вашего взаимодействия с этим кодом - посредством задания
функции transformation.
Однако вы поняли, что для вашей текущей задачи вам не нужно никак преобразовывать
список значений, а нужно получить его как есть.
Напишите такое лямбда-выражение transformation, чтобы transformed_values получился
копией values.

Пример:

Ввод:
values = [1, 23, 42, ‘asdfg’]
transformed_values = list(map(trasformation, values))
if values == transformed_values:
print(‘ok’)
else:
print(‘fail’)

Вывод:
ok

# Решение:
transformation = lambda x: x
values = [1, 23, 42, "asdfg"]
transformed_values = list(map(transformation, values))
if values == transformed_values:
    print("ok")
else:
    print('fail')

#--------------------------------------
"""

"""
Задача №49. Решение в группах
Планеты вращаются вокруг звезд по эллиптическим орбитам.
Назовем самой далекой планетой ту, орбита которой имеет
самую большую площадь. Напишите функцию
find_farthest_orbit(list_of_orbits), которая среди списка орбит
планет найдет ту, по которой вращается самая далекая
планета. Круговые орбиты не учитывайте: вы знаете, что у
вашей звезды таких планет нет, зато искусственные спутники
были были запущены на круговые орбиты. Результатом
функции должен быть кортеж, содержащий длины полуосей
эллипса орбиты самой далекой планеты. Каждая орбита
представляет из себя кортеж из пары чисел - полуосей ее
эллипса. Площадь эллипса вычисляется по формуле S = pi*a*b,
где a и b - длины полуосей эллипса. При решении задачи
используйте списочные выражения. Подсказка: проще всего
будет найти эллипс в два шага: сначала вычислить самую
большую площадь эллипса, а затем найти и сам эллипс,
имеющий такую площадь. Гарантируется, что самая далекая
планета ровно одна:

Пример:

Ввод:
orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
print(*find_farthest_orbit(orbits))
Вывод:
2.5 10

# Решение:
def find_farthest_orbit(orbits):
    return max([item for item in orbits if item[0] != item[1]], key=lambda x: 3.14 * x[0] * x[1])

orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
print(*find_farthest_orbit(orbits))

# Решение студента (неправильное. не учел круговые орбиты искусственных спутников)
def find_farthest_orbit(list_of_orbits):
    areas = [pi*item[0]*item[1] for item in list_of_orbits]
    max_area = max(areas)
    return list_of_orbits[areas.index(max_area)]

orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
print(*find_farthest_orbit(orbits))

#--------------------------------------
"""

"""
Задача №51. Решение в группах
Напишите функцию same_by(characteristic, objects), которая
проверяет, все ли объекты имеют одинаковое значение
некоторой характеристики, и возвращают True, если это так.
Если значение характеристики для разных объектов
отличается - то False. Для пустого набора объектов, функция
должна возвращать True. Аргумент characteristic - это
функция, которая принимает объект и вычисляет его
характеристику.

Ввод:                                     Вывод:
values = [0, 2, 10, 6]                    same
if same_by(lambda x: x % 2, values):
    print(‘same’)
else:
    print(‘different’)

# Решение:
def same_by(func, list_1):
    return len(set(map(func, list_1))) < 2

values = [0, 2, 10, 6]

if same_by(lambda x: x % 2, values):
    print('same')
else:
    print('different')
    
#--------------------------------------
"""

"""
# Дополнительное Задание 1
Реализовать функцию, принимающую несколько параметров,
описывающих данные пользователя:
имя, фамилия, год рождения, город проживания, email, телефон.
Функция должна принимать параметры как именованные аргументы.
Реализовать вывод данных о пользователе одной строкой.

Пример: Иван Иванов 1846 года рождения, проживает в городе Москва,
email: jackie@gmail.com, телефон: 01005321456

# Решение:
def func(**kwargs):
    return f"Сотрудник: {kwargs['name']} {kwargs['surname']} возрастом {kwargs['age']} лет"

print(func(name="Иван", surname="Иванов", age=20))

#--------------------------------------

# Пример с неопределенным числом позиционных и именованными параметрами *args и *kwargs
def my_func(*args):
    return args

print(my_func(10, "text_1", 20, "text_2"))

def my_func(**kwargs):
    return kwargs

print(my_func(el_1=10, el_2=20, el_3="text"))

#--------------------------------------
"""

"""
# Дополнительное задание 2

Реализовать функцию my_func(), которая принимает три позиционных аргумента,
и возвращает сумму наибольших двух аргументов.
Попробуйте решить задачу двумя способами: используя функцию sort()

# Решение:
def my_func(*args):
    return sum(sorted(args, reverse=True)[:2])

print(my_func(3, 5, 7))

#--------------------------------------
"""

"""
# Дополнительное задание 3

Погружение в Python | Функции
✔ Напишите функцию, которая принимает строку текста. Вывести функцией каждое слово с новой строки.
✔ Строки нумеруются начиная с единицы. Слова выводятся отсортированными согласно кодировки Unicode.
✔ Текст выравнивается по правому краю так, чтобы у самого длинного слова был один пробел между ним и номером строки.

# Решение:
def func(text):
    data = sorted(text.lower().split())
    max_len = max([len(elem) for elem in data])
    for i, elem in enumerate(data, 1):
        print(f"{i}. {elem:>{max_len}}")


func("Вывести функцией каждое слово с новой строки")

#--------------------------------------
"""

"""
# Дополнительное задание 4
✔ Функция получает на вход словарь с названием компании в качестве ключа
и списком с доходами и расходами (3-10 чисел) в качестве значения.
✔ Вычислите итоговую прибыль или убыток каждой компании. Если все компании
прибыльные, верните истину, а если хотя бы одна убыточная — ложь.

data = {"company_1": [70, 12, 25, -28, 10, 36],
"company_2": [-55, 10, -20, -10, -15, -15],
"company_3": [40, 12, 21, -70, 11, 65]}

# Решение:

data = {"company_1": [70, 12, 25, -28, 10, 36],
        "company_2": [55, 10, -20, -10, -15, -15],
        "company_3": [40, 12, 21, -70, 11, 65]}

def func(data):
    for value in data.values():
        if sum(value) < 0:
            return False
    return True

print(func(data))

#--------------------------------------
"""

"""
# HW 1
Напишите функцию print_operation_table(operation, num_rows, num_columns), которая принимает в качестве
аргумента функцию, вычисляющую элемент по номеру строки и столбца. По умолчанию номер столбца и строки = 9.

Аргументы num_rows и num_columns указывают число строк и столбцов таблицы, которые должны быть распечатаны.

Нумерация строк и столбцов идет с единицы (подумайте, почему не с нуля).

Если строк меньше двух, выдайте текст
ОШИБКА! Размерности таблицы должны быть больше 2!.

Примечание: бинарной операцией называется любая операция, у которой ровно два аргумента, как, например, у
операции умножения.

Между элементами должен быть 1 пробел, в конце строки пробел не нужен.

Пример

На входе:

print_operation_table(lambda x, y: x * y, 3, 3)

На выходе:

1 2 3
2 4 6
3 6 9

# Решение:
def print_operation_table(operation, num_rows=9, num_columns=9):
    if num_rows < 2:
        print("ОШИБКА! Размерности таблицы должны быть больше 2!")
        return

    for i in range(1, num_rows + 1):
        row = []
        for j in range(1, num_columns + 1):
            row.append(str(operation(i, j)))
        print(" ".join(row))


# Пример использования:
print_operation_table(lambda x, y: x * y, 3, 3)
"""
