"""
Home_Work_1

На столе лежат n монеток. Некоторые из монеток лежат вверх решкой, а некоторые – гербом. Ваша задача - определить
минимальное количество монеток, которые нужно перевернуть, чтобы все монетки лежали одной и той же стороной вверх.
Входные данные:

На вход программе подается список coins, где coins[i] равно 0, если i-я монетка лежит гербом вверх, и равно 1,
если i-я монетка лежит решкой вверх. Размер списка не превышает 1000 элементов.
Выходные данные:
Программа должна вывести одно целое число - минимальное количество монеток, которые нужно перевернуть.
Пример использования На входе:
coins = [0, 1, 0, 1, 1, 0]
На выходе:
3

coins = [0, 1, 0, 1, 1, 0, 1, 1, 1, 0]

zero_coin = 0
one_coin = 0
for el in coins:
    if el == 0:
        zero_coin += 1
    if el == 1:
        one_coin += 1
if zero_coin >= one_coin:
    print(one_coin)
else:
    print(zero_coin)

Home_Work_2

Петя и Катя – брат и сестра. Петя – студент, а Катя – школьница. Петя помогает Кате по математике.
Он задумывает два натуральных числа X и Y (X,Y≤1000), а Катя должна их отгадать. Для этого Петя делает две подсказки.
Он называет сумму этих чисел S и их произведение P. Помогите Кате отгадать задуманные Петей числа.
Примечание: числа S и P задавать не нужно, они будут передаваться в тестах. В результате вы должны
вывести все возможные пары чисел X и Y через пробел, такие что X <= Y.
Пример
На входе:
s = 12
p = 27
На выходе:
3 9

def find_numbers(s, p):
    for x in range(1, s + 1):
        if p % x == 0:
            y = p // x
            if x + y == s and x <= y:
                print(x, y)

s = 22
p = 72
find_numbers(s, p)

Home_Work_3

Требуется вывести все целые степени двойки (т.е. числа вида 2k), не превосходящие числаN.
Пример
n=16
#Вывод
1
2
4
8
16
"""
n = 16
for i in range(n+1):
    if 2**i <= n:
        print (2**i)