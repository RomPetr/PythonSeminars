"""
Задача №17. Решение в группах
Дан список чисел. Определите, сколько в нем
встречается различных чисел.
Input: [1, 1, 2, 0, -1, 3, 4, 4]
Output: 6

# first variant
list_1 = [1, 1, 2, 0, -1, 3, 4, 4]
print(len(set(list_1)))

# second variant
list_2 = []
for el in list_1:
    if el not in list_2:
        list_2.append(el)
print(len(list_2))
#--------------------------------------
Задача №19. Решение в группах
Дана последовательность из N целых чисел и число
K. Необходимо сдвинуть всю последовательность
(сдвиг - циклический) на K элементов вправо, K –
положительное число.
Input: [1, 2, 3, 4, 5] k = 3
Output: [4, 5, 1, 2, 3]

array = [1, 2, 3, 4, 5]
k = 3
# print(array[k-1:] + array[:k-1])
for _ in range(k):
    last = array.pop()
    array.insert(0, last)
print(array)
#--------------------------------------
Задача №21. Решение в группах
Напишите программу для печати всех уникальных
значений в словаре.
Input: [{"V": "S001"}, {"V": "S002"}, {"VI": "S001"},
{"VI": "S005"}, {"VII": " S005 "}, {" V ":" S009 "}, {" VIII
":" S007 "}]
Output: {'S005', 'S002', 'S007', 'S001', 'S009'}

list_dict_1 = [{"V": "S001"}, {"V": "S002"}, {"VI": "S001"}, {"VI": "S005"},
               {"VII": " S005 "}, {" V ":" S009 "}, {" VIII":" S007 "}]
set_1 = set()

for dict_1 in list_dict_1:
    for value in dict_1.values():
        set_1.add(value)
print(set_1)
#--------------------------------------
Задача №23. Решение в группах
Дан массив, состоящий из целых чисел. Напишите
программу, которая подсчитает количество
элементов массива, больших предыдущего (элемента
с предыдущим номером)
Input: [0, -1, 5, 2, 3]
Output: 2 (-1 < 5, 2 < 3)
#--------------------------------------
list_1 = [0, -1, 5, 2, 3]
counter = 0
for i in range(1, len(list_1)):
    if list_1[i] > list_1[i - 1]:
        counter += 1
print(counter)
#--------------------------------------
Показать четные элементы на нечетных позициях

array = [10, 21, 31, 40, 51, 60, 70, 80, 91]
for i in range(0, len(array), 2):
    if array[i] % 2 == 0:
        print(array[i])
#--------------------------------------
Поменять местами первый элемент с последним

list_1 = [4, 5, 78, 93, 18]
print(list_1)
last = list_1.pop()
first = list_1.pop(0)
list_1.insert(0, last)
list_1.append(first)
print(list_1)
#--------------------------------------
HW_1
Требуется вычислить, сколько раз встречается некоторое число k в массиве list_1.
Найдите количество и выведите его.

list_1 = [1, 2, 3, 4, 5]
k = 3
count = 0
for el in list_1:
    if el == k:
        count += 1
print(count)
#--------------------------------------
HW_2
Требуется найти в массиве list_1 самый близкий по значению элемент к заданному числу k и вывести его.
Считать, что такой элемент может быть только один. Если значение k совпадает с этим
элементом - выведите его.
Пример:
list_1 = [1, 2, 3, 4, 5]
k = 6
# 5

list_1 = [1, 12, 6, 7, 8, 15]
k = 11

cl_val = list_1[0]
min_dist = abs(cl_val - k)

for el in list_1:
    dist = abs(el-k)
    if dist < min_dist:
        cl_val = el
        min_dist = dist
print(cl_val)
#--------------------------------------
HW_3
В настольной игре Скрабл (Scrabble) каждая буква имеет определенную ценность.
В случае с английским алфавитом очки распределяются так:
    A, E, I, O, U, L, N, S, T, R – 1 очко;
    D, G – 2 очка;
    B, C, M, P – 3 очка;
    F, H, V, W, Y – 4 очка;
    K – 5 очков;
    J, X – 8 очков;
    Q, Z – 10 очков.

А русские буквы оцениваются так:
    А, В, Е, И, Н, О, Р, С, Т – 1 очко;
    Д, К, Л, М, П, У – 2 очка;
    Б, Г, Ё, Ь, Я – 3 очка;
    Й, Ы – 4 очка;
    Ж, З, Х, Ц, Ч – 5 очков;
    Ш, Э, Ю – 8 очков;
    Ф, Щ, Ъ – 10 очков.

Напишите программу, которая вычисляет стоимость введенного пользователем слова k и выводит его.
Будем считать, что на вход подается только одно слово, которое содержит либо только английские,
либо только русские буквы.
Пример:

k = 'ноутбук'
# 12

"""

def scrabble_score(word):
    # Определение значений очков для английских и русских букв
    english_scores = {
        1: "AEIOULNRST",
        2: "DG",
        3: "BCMP",
        4: "FHVWY",
        5: "K",
        8: "JX",
        10: "QZ"
    }

    russian_scores = {
        1: "АВЕИНОРСТ",
        2: "ДКЛМПУ",
        3: "БГЁЬЯ",
        4: "ЙЫ",
        5: "ЖЗХЦЧ",
        8: "ШЭЮ",
        10: "ФЩЪ"
    }

    # Создание словарей для быстрого поиска стоимости букв
    letter_to_score = {}

    # Заполнение словаря для английских букв
    for score, letters in english_scores.items():
        for letter in letters:
            letter_to_score[letter] = score

    # Заполнение словаря для русских букв
    for score, letters in russian_scores.items():
        for letter in letters:
            letter_to_score[letter] = score

    # Приведение слова к верхнему регистру для сопоставления с ключами словаря
    word = word.upper()

    # Подсчет стоимости слова
    total_score = sum(letter_to_score[letter] for letter in word)

    return total_score


# Пример использования
k = 'ноутбуки'
print(scrabble_score(k))  # 12

